// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MindTrack.Models.Data;

#nullable disable

namespace MindTrack.Models.Migrations
{
    [DbContext(typeof(MindTrackContext))]
    partial class MindTrackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MindTrack.Models.Answer", b =>
                {
                    b.Property<Guid>("Answer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("Question_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Answer_id");

                    b.HasIndex("Question_id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MindTrack.Models.Article", b =>
                {
                    b.Property<Guid>("Article_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Article_id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("MindTrack.Models.Emotion", b =>
                {
                    b.Property<Guid>("Emotion_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Mood_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reflection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Emotion_id");

                    b.HasIndex("Mood_id");

                    b.HasIndex("User_id");

                    b.ToTable("Emotions");
                });

            modelBuilder.Entity("MindTrack.Models.MoodSelection", b =>
                {
                    b.Property<Guid>("Mood_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Mood_id");

                    b.ToTable("MoodSelections");
                });

            modelBuilder.Entity("MindTrack.Models.Question", b =>
                {
                    b.Property<Guid>("Question_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Question_id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MindTrack.Models.TaskCategory", b =>
                {
                    b.Property<Guid>("Category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserTaskTask_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Category_id");

                    b.HasIndex("UserTaskTask_id");

                    b.ToTable("TaskCategories");
                });

            modelBuilder.Entity("MindTrack.Models.User", b =>
                {
                    b.Property<Guid>("User_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MindTrack.Models.UserTask", b =>
                {
                    b.Property<Guid>("Task_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Category_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Task_id");

                    b.HasIndex("User_id");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("MindTrack.Models.Answer", b =>
                {
                    b.HasOne("MindTrack.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MindTrack.Models.Emotion", b =>
                {
                    b.HasOne("MindTrack.Models.MoodSelection", "Mood_selection")
                        .WithMany("Emotions")
                        .HasForeignKey("Mood_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MindTrack.Models.User", "User")
                        .WithMany("Emotions")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mood_selection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindTrack.Models.TaskCategory", b =>
                {
                    b.HasOne("MindTrack.Models.UserTask", "UserTask")
                        .WithMany("Task_categories")
                        .HasForeignKey("UserTaskTask_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTask");
                });

            modelBuilder.Entity("MindTrack.Models.UserTask", b =>
                {
                    b.HasOne("MindTrack.Models.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MindTrack.Models.MoodSelection", b =>
                {
                    b.Navigation("Emotions");
                });

            modelBuilder.Entity("MindTrack.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MindTrack.Models.User", b =>
                {
                    b.Navigation("Emotions");

                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("MindTrack.Models.UserTask", b =>
                {
                    b.Navigation("Task_categories");
                });
#pragma warning restore 612, 618
        }
    }
}
